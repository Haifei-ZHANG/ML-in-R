}
plot(1:Kmax,error,type="l",ylim=range(error,biais2,variance))
lines(1:Kmax,biais2,lty=2)
lines(1:Kmax,variance,lty=3)
lines(1:Kmax,biais2+variance+sig^2,lty=4,col="red")
astro <- read.csv("D:/A-UTC/1PEDAGOGIQUE/A2018/SY19/TP/TP7/astro/astronomy_train.csv")
astro = astro [,c(-1,-10)]
astro <- read.csv("D:/A-UTC/1PEDAGOGIQUE/A2018/SY19/TP/TP7/astro/astronomy_train.csv")
astro = astro [,c(-1,-10)]
astro.n <- nrow(astro)
astro.p <- ncol(astro)
napp<- round(2*astro.n/3)
ntst<- astro.n-napp
ntrain <- sample(1:astro.n,  floor(2*astro.n/3))
astro.train <- astro[ntrain,]
astro.test <- astro[-ntrain,]
library(caret)
K=10
folds<-createFolds(1:astro.n,K)
library(class)
library(MASS)
library(caret)
error_knn<-0
knn_class<-knn(astro.train[,-12],astro.test[,-12],astro.train[,12],k=100)
knn_table<-table(astro.test[,12],knn_class)
error_knn<-1-sum(diag(knn_table))/ntst
cat("Error knn =", error_knn)
library(klaR)
error_lda<-0
class.fit_b<-stepclass(class~.,data=astro,method='lda',direction="backward")
for(i in (1:K)){
data.train<-astro[-folds[[i]],]
data.test<-astro[folds[[i]],]
lda.mod<-lda(class.fit_b$formula,data=data.train)
lda.pred<-predict(lda.mod,newdata=data.test)
lda.table<-table(data.test$class,lda.pred$class)
error_lda<-error_lda+(1-sum(diag(lda.table))/(astro.n/K))
}
error_lda<-error_lda/K
(class.fit_b)
cat("Error lda =", error_lda)
error_qda<-0
class.fit_b<-stepclass(class~.,data=astro,method='qda',direction="backward")
for(i in (1:K)){
data.train<-astro[-folds[[i]],]
data.test<-astro[folds[[i]],]
qda.mod<-qda(class.fit_b$formula,data=data.train)
qda.pred<-predict(qda.mod,newdata=data.test)
qda.table<-table(data.test$class,qda.pred$class)
error_qda<-error_qda+(1-sum(diag(qda.table))/(astro.n/K))
}
error_qda<-error_qda/K
(class.fit_b)
cat("error qda =", error_qda)
library(e1071)
error_nbc<-0
for(i in (1:K)){
data.train<-astro[-folds[[i]],]
data.test<-astro[folds[[i]],]
nbc.mod<-naiveBayes(as.factor(class)~.,data=data.train)
nbc.pred<-predict(nbc.mod,newdata=data.test)
nbc.table<-table(data.test$class,nbc.pred)
error_nbc<-error_nbc+(1-sum(diag(nbc.table))/(astro.n/K))
}
error_nbc<-error_nbc/K
cat("error nbc =", error_nbc)
library(nnet)
logr.mod<-multinom(formula =as.factor(class) ~ ra + u + r + i + z + run + redshift + mjd,data=astro.train)
logr.pred<-predict(logr.mod,newdata=astro.test)
logr.table<-table(astro.test$class,logr.pred)
error_logr<-1-sum(diag(logr.table))/ntst
cat("final model : class ~ ra + u + r + i + z + run + redshift + mjd \n")
cat("error logr =", error_logr)
library(tree)
astro$class<- as.factor(astro$class)
tree.astro<- tree(class ~.,data=astro.train,control=tree.control(nobs=napp,mindev = 0.0001))
yhat<-predict(tree.astro,newdata=astro.test[,-12],type='class')
perf.tree <-table(astro.test$class,yhat)
error_tree_original <- 1-sum(diag(perf.tree))/ntst
cat("error decision tree =", error_tree_original)
cv.tree.astro<-cv.tree(tree.astro,FUN=prune.misclass)
plot(cv.tree.astro$size,cv.tree.astro$dev/napp,type="b")
prune.astro<-prune.misclass(tree.astro,best=4)
yhat<-predict(prune.astro,newdata=astro.test,type='class')
perf.tree <-table(astro.test$class,yhat)
error_tree_prune<-1-sum(diag(perf.tree))/ntst
plot(prune.astro)
text(prune.astro,pretty=0)
cat("Error of pruned tree with 4 branches =", error_tree_prune)
library(randomForest)
bag.astro<-randomForest(class~.,data=astro.train,ntree=500,mtry=17)
yhat.bag<-predict(bag.astro,newdata=astro.test,type='class')
perf.bag <-table(astro.test$class,yhat.bag)
error_bagging<-1-sum(diag(perf.bag))/ntst
cat("error  bagging tree =", error_bagging)
rf.astro<-randomForest(class~.,data=astro,subset=ntrain,mtry=4)
yhat.rf<-predict(bag.astro,newdata=astro.test,type='class')
perf.rf <-table(astro.test$class,yhat.bag)
error_rf <- 1-sum(diag(perf.bag))/ntst
cat("error random Forest = ", error_rf)
library(kernlab)
library(e1071)
svm.model <- svm(class~., data = astro.train, type = 'C-classification')
svm.pred <- predict(svm.model, newdata=astro.test)
svm.table <- table(astro.test$class, svm.pred)
error_svm <- 1-sum(diag(svm.table))/(ntst)
cat("Le taux d'erreur du SVM sans noyau : ",error_svm)
svm_test <- function(x,y){
type <- c('C-classification','one-classification')
kernel <- c('linear','polynomial','radial','sigmoid')
pred <- array(0, dim=c(nrow(x),2,4))
errors <- matrix(0,2,4)
dimnames(errors) <- list(type, kernel)
for(i in 1:2){
for(j in 1:4){
pred[,i,j] <- predict(object = svm(x, y, type = type[i], kernel = kernel[j]), newdata = x,cost=100)
if(i > 2) errors[i,j] <- sum(pred[,i,j] != 1)
else errors[i,j] <- sum(pred[,i,j] != as.integer(y))/nrow(astro)
}
}
return(errors)
}
choix_svm<-svm_test(x=astro[,-12],y=astro$class)
choix_svm
error_svm_linear<-choix_svm[1]
cat("error svm with linear kernel =", error_svm_linear)
ksvm.mod_lap<- ksvm(class~.,data=astro.train,scaled=TRUE,type="C-svc",kernel="laplacedot",prob.model=TRUE, kpar=list(sigma=0.1), C=100,epsilon=0.1 )
ksvm.pred_lap<- predict(ksvm.mod_lap,newdata=astro.test)
ksvm.table_lap<-table(astro.test$class,ksvm.pred_lap)
error_ksvm_laplace<-1-sum(diag(ksvm.table_lap))/ntst
ksvm.mod_gau<- ksvm(class~.,data=astro.train,type="C-bsvc",kernel="rbfdot",prob.model=TRUE,kpar=list(sigma=0.1), C=100,epsilon=0.1)
ksvm.pred_gau<- predict(ksvm.mod_gau,newdata=astro.test)
ksvm.table_gau<-table(astro.test$class,ksvm.pred_gau)
error_ksvm_gau<- 1-sum(diag(ksvm.table_gau))/ntst
ksvm.mod_pol<- ksvm(class~.,data=astro.train,type="C-svc",kernel="polydot",prob.model=TRUE,C=100,epsilon=0.1,kpar=list(degree=1, scale= 1, offset = 1))
ksvm.pred_pol<- predict(ksvm.mod_pol,newdata=astro.test)
ksvm.table_pol<-table(astro.test$class,ksvm.pred_pol)
error_ksvm_poly<-1-sum(diag(ksvm.table_pol))/ntst
cat("error_ksvm_Laplacian = ",error_ksvm_laplace,"\n")
cat("error_ksvm_Gaussian =",error_ksvm_gau,"\n")
cat("error_ksvm_Polynomial =", error_ksvm_poly,"\n")
methodes <- c("KNN", "LDA", "QDA", "Naive Bayes classifier",  "Logistic Regression","original tree","pruned tree","bagging tree","random forest", "SVM sans noyau", "Linear Kernel","Laplacian kernel",  "Gaussian kernel " ,"Polynomial Kernel")
barplot(ERRORs,col=c("sandybrown","sandybrown","hotpink","sandybrown","hotpink","hotpink","hotpink", "hotpink","hotpink","sandybrown","steelblue","steelblue","steelblue","hotpink"),ylim=c(0,0.2),width=1,space=1,ylab="ERROR",las=1,main = "error par différentes méthodes")
text(x=seq(2,28,by=2),y=-0.002, srt = 30, adj = 1.2, labels = methodes,xpd = TRUE)
abline(h=0)
ERRORs <- c(error_knn, error_lda, error_qda, error_nbc, error_logr,  error_tree_original,error_tree_prune, error_bagging,error_rf,error_svm,error_svm_linear, error_ksvm_laplace, error_ksvm_gau,error_ksvm_poly)
methodes <- c("KNN", "LDA", "QDA", "Naive Bayes classifier",  "Logistic Regression","original tree","pruned tree","bagging tree","random forest", "SVM sans noyau", "Linear Kernel","Laplacian kernel",  "Gaussian kernel " ,"Polynomial Kernel")
barplot(ERRORs,col=c("sandybrown","sandybrown","hotpink","sandybrown","hotpink","hotpink","hotpink", "hotpink","hotpink","sandybrown","steelblue","steelblue","steelblue","hotpink"),ylim=c(0,0.2),width=1,space=1,ylab="ERROR",las=1,main = "error par différentes méthodes")
text(x=seq(2,28,by=2),y=-0.002, srt = 30, adj = 1.2, labels = methodes,xpd = TRUE)
abline(h=0)
cat("La meilleure méthode : ",methodes[which.min(ERRORs)])
cat("\nSon taux d'erreur : ",min(ERRORs))
setwd("D:/A-UTC/1PEDAGOGIQUE/P2019/SY09/TP/TP 01  Introduction à R-20190302")
check <- function(data) {
stopifnot(colnames(data)[1] == "Sepal.Length",
colnames(data)[2] == "Sepal.Width",
colnames(data)[3] == "Petal.Length",
colnames(data)[4] == "Petal.Width",
colnames(data)[5] == "Species",
nrow(data) == 150,
ncol(data) == 5,
is.numeric(data[,1]),
is.numeric(data[,2]),
is.numeric(data[,3]),
is.numeric(data[,4]),
is.factor(data[,5]))
print("Chargement OK")
}
iris1 = read.csv("/donnees/iris1.data",header = True)
iris1 = read.csv("donnees/iris1.data",header = True)
iris1 = read.csv("donnees/iris1.data",header = T)
View(iris1)
View(iris1)
iris1 = read.csv("donnees/iris1.data",sep = '&',header = TRUE)
View(iris1)
View(iris1)
iris2 = read.csv("donnees/iris2.data",sep = '&',header = TRUE)
View(iris2)
View(iris2)
iris2 = read.csv("donnees/iris2.data",sep = ',',header = TRUE)
View(iris2)
iris2 = read.csv("donnees/iris2.data",sep = ' ',header = TRUE)
View(iris2)
View(iris2)
iris2 = read.delim("donnees/iris2.data",header = TRUE)
iris3 = read.csv("donnees/iris3.data",sep = ';',header = TRUE)
iris3 = read.csv2("donnees/iris3.data",header = TRUE)
check(iris3)
View(iris3)
View(iris3)
check(iris1)
check(iris2)
check(iris3)
iris3 = read.csv("donnees/iris3.data",sep = ';',header = TRUE)
check(iris3)
iris3 = read.csv2("donnees/iris3.data",sep = ';',header = TRUE)
check(iris3)
iris4 = read.csv("donnees/iris4.data",sep = ',',header = TRUE)
View(iris4)
View(iris4)
iris4 = read.table("donnees/iris4.data",header = TRUE)
check(iris5)
View(iris4)
View(iris4)
iris4 = read.table("donnees/iris4.data")
check(iris4)
View(iris4)
View(iris4)
iris5 = read.table("donnees/iris5.data")
View(iris5)
View(iris5)
iris5 = read.csv("donnees/iris5.data")
check(iris5)
iris5 = read.csv("donnees/iris5.data",sep = ',')
check(iris5)
iris5 = read.csv2("donnees/iris5.data",sep = ',')
check(iris5)
iris5 = read.csv2("donnees/iris5.data",sep = ',',header = TRUE)
check(iris5)
iris1 = read.csv("donnees/iris1.data",sep = '&',header = TRUE)
iris2 = read.delim("donnees/iris2.data",header = TRUE)
iris3 = read.csv("donnees/iris3.data",header = TRUE)
iris4 = read.table("donnees/iris4.data")
iris5 = read.csv2("donnees/iris5.data",sep = ',',header = TRUE)
check(iris1)
check(iris2)
check(iris3)
iris3 = read.csv("donnees/iris3.data",sep = ';',header = TRUE)
check(iris3)
check(iris4)
check(iris5)
View(iris5)
View(iris5)
iris5 = read.csv("donnees/iris5.data",sep = ',')
check(iris5)
iris5 = read.csv("donnees/iris5.data",sep = ',',header = TRUE)
check(iris5)
summary(iris1)
type(iris5[,4])
istype(iris5[,4])
mode(iris5[,4])
iris5 = read.csv("donnees/iris5.data",sep = ',',header = TRUE)
check(iris5)
mode(iris5[,4])
class(iris5[,4])
typeof(iris5[,4])
iris5[,4] <- as.numeric(iris5[,4])
check(iris5)
mode(iris5[,4])
class(iris5[,4])
typeof(iris5[,4])
class[iris1[,1]]
class[iris1[,1]]
class(iris1[,1])
class(iris[:,5])
class(iris[1:,5])
class(iris[0:3,5])
class(iris1[0:3,5])
class(iris1[0:150,5])
class(iris1[0:150,1])
class(read.table(text='TRUE')[,1])
class(read.table(text='F')[,1])
class(read.table(text='A')[,1])
class(read.table(text='3.14')[,1])
class(read.table(text='2')[,1])
class(read.table(text="a")[,1])
class(read.table(text="abc")[,1])
class(read.table(text="abc,lrkgwbo")[,1])
class(read.table(text=as.character("abc,lrkgwbo"))[,1])
class(read.table(text=as.character("a"))[,1])
sapply(iris, class)
load('donnees/iris.Rdata')
View(iris6)
View(iris6)
check(iris6)
iris6[,4] <- as.numeric(iris6,4])
iris6[,4] <- as.numeric(iris6[,4])
View(iris5)
load('donnees/iris.Rdata')
sapply(iris6, class)
check(iris6)
iris6[,4] <- as.numeric(iris6[,4])
iris6[,4] <- as.numeric(iris6[,4])
check(iris6)
load('donnees/iris.Rdata')
sapply(iris6, class)
check(iris6)
iris6[,4] <- as.numeric(iris6[,4])
check(iris6)
sy02 = read.csv("donnees/sy02-p2016.csv")
View(sy02)
View(sy02)
sapply(sy02,class)
levels(sy02$correcteur.median)
levels(sy02$correcteur.final)
levels(sy02$resultat)
sy02$resultat <- factor(sy02$resultat,ordered = T)
levels(sy02$resultat)
sy02$resultat <- factor(sy02$resultat,levels = c("A","B","C","D","E","FX","F","ABS"), ordered = T)
levels(sy02$resultat)
sy02$resultat <- factor(sy02$resultat,levels = c("A","B","C","D","E","FX","F","ABS"), ordered = TRUE)
levels(sy02$resultat)
sy02$resultat
sy02$resultat <- factor(sy02$resultat,levels = c("A","B","C","D","E","FX","F","ABS").reverce(), ordered = TRUE)
check <- function(data) {
stopifnot(colnames(data)[1] == "Sepal.Length",
colnames(data)[2] == "Sepal.Width",
colnames(data)[3] == "Petal.Length",
colnames(data)[4] == "Petal.Width",
colnames(data)[5] == "Species",
nrow(data) == 150,
ncol(data) == 5,
is.numeric(data[,1]),
is.numeric(data[,2]),
is.numeric(data[,3]),
is.numeric(data[,4]),
is.factor(data[,5]))
print("Chargement OK")
}
### Q1 Chargement d’un jeu de données
iris1 = read.csv("donnees/iris1.data",sep = '&',header = TRUE)
iris2 = read.delim("donnees/iris2.data",header = TRUE)
iris3 = read.csv("donnees/iris3.data",sep = ';',header = TRUE)
iris4 = read.table("donnees/iris4.data")
iris5 = read.csv("donnees/iris5.data",sep = ',',header = TRUE)
iris5[,4] <- as.numeric(iris5[,4])
check(iris1)
check(iris2)
check(iris3)
check(iris4)
check(iris5)
### Q2 Conversion de types
class(iris1[,1])
class(iris1[,1])
class(read.table(text='TRUE')[,1])
class(read.table(text='F')[,1])
class(read.table(text='A')[,1])
class(read.table(text='3.14')[,1])
class(read.table(text='2')[,1])
class(read.table(text=as.character("a"))[,1])
sapply(iris, class)
load('donnees/iris.Rdata')
sapply(iris6, class)
check(iris6)
iris6[,4] <- as.numeric(iris6[,4])
check(iris6)
### Q3 Recodage de facteurs
sy02 = read.csv("donnees/sy02-p2016.csv")
sapply(sy02,class)
sy02$resultat <- factor(sy02$resultat,levels = c("ABS","F","FX","E","D","C","B","A"), ordered = TRUE)
sy02$resultat <- factor(sy02$resultat,levels = c("ABS","F","FX","E","D","C","B","A"), ordered = TRUE)
sy02$resultat
10^(10^10)
0/0
iris3[1,]
iris4[1,]
iris1 = read.csv("donnees/iris1.data",sep = '&')
iris3 = read.csv("donnees/iris3.data",sep = ';')
iris3 = read.csv("donnees/iris3.data",sep = ';')
View(iris3)
View(iris3)
iris3[1,]
iris4 = read.table("donnees/iris4.data",header = T)
View(iris4)
View(iris4)
iris4 = read.table("donnees/iris4.data",header = T)
View(iris4)
View(iris4)
babies <- read.table('donnees/babies23.data')
View(babies)
View(babies)
babies1 <- read.csv('donnees/babies23.data')
View(babies1)
View(babies1)
babies1 <- read.delim('donnees/babies23.data')
View(babies1)
View(babies1)
babies1 <- read.delim2('donnees/babies23.data')
rm(babies1)
babies1 <- read.delim2('donnees/babies23.data')
View(babies1)
View(babies1)
babies1 <- read.delim2('donnees/babies23.data',sep=' ')
babies1 <- read.csv('donnees/babies23.data',sep=' ')
babies1 <- read.csv('donnees/babies23.data',sep=' ',header=T)
babies1 <- read.csv('donnees/babies23.data',sep=' ',head=T)
babies <- read.table('donnees/babies23.data',header=F)
View(babies)
View(babies)
babies <- read.table('donnees/babies23.data',head=F)
babies <- read.table('donnees/babies23.data',head=T)
View(babies)
View(babies)
names(babies) <- c("bwt", "gestation", "parity", "age", "height", "weight",
"smoke", "education")
View(babies)
View(babies)
hist(babies$gestation)
babies$gestation
hist(babies$age)
names([babies[,c[7, 5, 8, 10, 12, 13, 21, 11]]) <- c("bwt", "gestation", "parity", "age", "height", "weight",
"smoke", "education")
hist(babies$age)
names([babies[,c(7, 5, 8, 10, 12, 13, 21, 11)]) <- c("bwt", "gestation", "parity", "age", "height", "weight",
"smoke", "education")
hist(babies$age)
names([babies[,c(7, 5, 8, 10, 12, 13, 21, 11)]) <- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
names(babies[,c(7, 5, 8, 10, 12, 13, 21, 11)]) <- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
View(babies)
View(babies)
babies <- read.table('donnees/babies23.data',head=T)
names(babies[,c(7, 5, 8, 10, 12, 13, 21, 11)]) <- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
View(babies)
View(babies)
hist(babies$age)
babies <- read.table('donnees/babies23.data',head=T)
rm(babies)
babies <- read.table('donnees/babies23.data',head=T)
View(babies)
View(babies)
names(babies[,c(7, 5, 8, 10, 12, 13, 21, 11)]) <- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
View(babies)
View(babies)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)])<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
View(babies)
View(babies)
babies[babies$bwt==999, "bwt"] <- NA
babies[babies$smoke==9, "smoke"] <- NA
View(babies)
View(babies)
sum(babies$smoke==NA)
babies&smoke <- factor(babies$smoke==1, levels = c("Smoking"))
babies$smoke <- factor(babies$smoke==1, levels = c("Smoking"))
View(babies)
View(babies)
babies <- read.table('donnees/babies23.data',head=T)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
babies[babies$smoke==9, "smoke"] <- NA
View(babies)
babies$smoke <- factor(babies$smoke==1, levels = c("Smoking"))
View(babies)
babies <- read.table('donnees/babies23.data',head=T)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
babies[babies$smoke==9, "smoke"] <- NA
levels(babies$smoke)
levels(babies.factore)
class(babies$smoke)
sapply(babies,class)
as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1) <- "Smoking"
smoke <- which(levels(babies$smoke)==1)
smoke
levels(babies$smoke)
as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1)
smoke
sapply(babies,class)
babies$smoke <- as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1)
smoke
sapply(babies,class)
levels(babies$smoke)
levels(babies$smoke)[smoke]<-"Smoking"
-smoke
levels(babies$smoke)[-smoke]<- "NonSmoking"
babies <- read.table('donnees/babies23.data',head=T)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
babies[babies$smoke==9, "smoke"] <- NA
babies$smoke <- as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1)
smoke
levels(babies$smoke)[smoke]<-"Smoking"
levels(babies$smoke)[-smoke]<- "NonSmoking"
babies[babies$smoke==NA,]
babies$smoke
babies <- read.table('donnees/babies23.data',head=T)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
babies[babies$smoke==9, "smoke"] <- NA
babies$smoke <- as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1)
smoke
levels(babies$smoke)[smoke]<-"Smoking"
levels(babies$smoke)[-smoke]<- "NonSmoking"
babies[babies$smoke==9, "smoke"] <- NA
babies[babies$bwt==999, "bwt"] <- NA
babies[babies$gestation==999, "gestation"] <- NA
babies[babies$age==99, "age"] <- NA
babies[babies$height==99, "height"] <- NA
babies[babies$weight==999, "weight"] <- NA
babies[babies$smoke==9, "smoke"] <- NA
babies[babies$education==9, "education"] <- NA
babies <- read.table('donnees/babies23.data',head=T)
names(babies)[c(7, 5, 8, 10, 12, 13, 21, 11)]<- c("bwt", "gestation", "parity", "age", "height", "weight","smoke", "education")
hist(babies$age)
babies[babies$bwt==999, "bwt"] <- NA
babies[babies$gestation==999, "gestation"] <- NA
babies[babies$age==99, "age"] <- NA
babies[babies$height==99, "height"] <- NA
babies[babies$weight==999, "weight"] <- NA
babies[babies$smoke==9, "smoke"] <- NA
babies[babies$education==9, "education"] <- NA
babies$smoke <- as.factor(babies$smoke)
smoke <- which(levels(babies$smoke)==1)
levels(babies$smoke)[smoke]<-"Smoking"
levels(babies$smoke)[-smoke]<- "NonSmoking"
rm(babies1)
